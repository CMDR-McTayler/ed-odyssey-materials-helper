import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.beryx:badass-jlink-plugin:2.24.1"
        classpath "io.freefair.gradle:lombok-plugin:5.3.3.3"
        classpath "de.jjohannes.gradle:extra-java-module-info:0.12"
    }
}
//plugins {
//    id "io.freefair.lombok" version "6.4.3"
//    id "de.jjohannes.extra-java-module-info" version "0.12"
//    id "org.beryx.jlink" version "2.25.0"
//}
apply plugin: "io.freefair.lombok"
apply plugin: 'idea' // optional (to generate IntelliJ IDEA project files)
apply plugin: "java"
apply plugin: "application"
apply plugin: "org.beryx.jlink"
apply plugin: "de.jjohannes.extra-java-module-info"
group 'nl.jixxed'
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
    modularity.inferModulePath = true
}
OperatingSystem os = DefaultNativePlatform.currentOperatingSystem;
jar {
    manifest {
        attributes 'Name': 'nl/jixxed/eliteodysseymaterials',
                'Implementation-Title': 'Elite Dangerous Odyssey Materials Helper',
                'Implementation-Version': project.version,
                'Codebase': ' *',
                'Permissions': ' all-permissions',
                'Application-Library-Allowable-Codebase': ' *',
                'Caller-Allowable-Codebase': ' *',
                'Trusted-Only': ' false',
                'Trusted-Library': ' false'
    }
}
repositories {
    mavenCentral()
    maven {
        name 'nexus'
        url "https://nexus.jixxed.nl/nexus/content/repositories/releases"
    }
}
application {
    mainModule = "nl.jixxed.eliteodysseymaterials"
    mainClass = "nl.jixxed.eliteodysseymaterials.Main"
    version = project.version
}

if (os.isWindows()) {
    ext { packageType = "msi" }
} else {
    ext { packageType = "deb" }
}
jlink {
    addExtraDependencies("javafx")
    options = ['--strip-debug', '--compress', '0', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'Elite Dangerous Odyssey Materials Helper'
        jvmArgs = [
                '-Dapp.version=' + project.version,
                '-Xmx1024M',
                '--add-exports=javafx.base/com.sun.javafx.event=org.controlsfx.controls',
                '--add-exports=jdk.naming.dns/com.sun.jndi.dns=java.naming',
                '--add-exports=javafx.graphics/com.sun.glass.ui=nl.jixxed.eliteodysseymaterials',
                '--add-exports=javafx.graphics/com.sun.javafx.tk=nl.jixxed.eliteodysseymaterials'
        ]
        if (os.isWindows()) {
            jvmArgs += [
                    '-Djavafx.cachedir=javafx-cache'
            ]
        }
    }
    jpackage {
        appVersion = project.version
        installerType = project.ext.packageType
        installerOptions = [
                '--description', 'Installer for ED Odyssey Materials Helper',
                '--copyright', 'Copyright 2021 CMDR Jixxed',
                '--name', 'Elite Dangerous Odyssey Materials Helper',
                '--app-version', project.version
        ]
        if (installerType == 'msi') {
            imageOptions += ['--icon', 'src/main/resources/images/application/rocket.ico']
        }
        if (installerType == 'deb') {
            imageOptions += ['--icon', 'src/main/resources/images/application/rocket.png']
        }
    }
}
def arch = System.getProperty("os.arch")
def platform = 'linux'
if (os.isWindows()) {
    platform = 'win'
} else if (os.isMacOsX()) {
    platform = 'mac'
}
if (arch == "aarch64") {
    platform += "-aarch64";
}
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.junit.platform:junit-platform-suite-api:1.8.2'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.11.0'
    testImplementation 'org.assertj:assertj-core:3.22.0'


    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'
    implementation group: 'io.reactivex.rxjava3', name: 'rxjava', version: '3.1.5'
    implementation 'org.slf4j:slf4j-api:1.7.36'
//    implementation 'org.slf4j:slf4j-simple:1.7.36'
    implementation 'ch.qos.logback:logback-core:1.2.11'
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    implementation('javax.servlet:javax.servlet-api:4.0.1')
    implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'
    implementation 'io.github.pustike:commons-csv:1.7.0'
    implementation 'nl.jixxed:opencv:4.5.3-0'
    implementation('org.jfxtras:jmetro:11.6.15') {
        exclude group: 'org.openjfx'
    }
    implementation("org.openjfx:javafx-base:18+:${platform}")
    implementation("org.openjfx:javafx-controls:18+:${platform}")
    implementation("org.openjfx:javafx-fxml:18+:${platform}")
    implementation("org.openjfx:javafx-graphics:18+:${platform}")
    implementation("org.openjfx:javafx-media:18+:${platform}")
    implementation("org.openjfx:javafx-swing:18+:${platform}")
    implementation('org.controlsfx:controlsfx:11+')
    testImplementation 'de.saxsys:mvvmfx-testing-utils:1.8.0'
    testImplementation("org.openjfx:javafx-swing:18+:${platform}")
    implementation 'com.github.scribejava:scribejava-core:8.3.1'
    implementation 'net.java.dev.jna:jna:5.11.0'
    implementation 'net.java.dev.jna:jna-platform:5.11.0'
    implementation group: 'nl.jixxed.tess4j', name: 'tess4j', version: '5.2.9'
    implementation group: 'nl.jixxed.lept4j', name: 'lept4j', version: '1.16.6'
//    implementation group: 'net.sourceforge.tess4j', name: 'tess4j', version: '5.2.1'
//    implementation group: 'net.sourceforge.lept4j', name: 'lept4j', version: '1.16.1'
    implementation 'com.github.jai-imageio:jai-imageio-core:1.4.0'

//        exclude group: 'org.jboss'
//    exclude group: 'com.github.jaiimageio'
//    exclude group: 'org.apache.pdfbox'
//    exclude group: 'org.apache.commons.logging'
//}


}
jpackage {
    if (os.isWindows()) {
        dependsOn test
    }
}
extraJavaModuleInfo {
    // This does not have to be a complete description (e.g. here 'org.apache.commons.collections' does not export anything here).
    // It only needs to be good enough to work in the context of this application we are building.
//    module('commons-beanutils-1.9.4.jar', 'org.apache.commons.beanutils', '1.9.4') {
//        exports('org.apache.commons.beanutils')
//
//        requires('org.apache.commons.logging')
//        requires('java.sql')
//        requires('java.desktop')
//    }
//    module('commons-cli-1.4.jar', 'org.apache.commons.cli', '3.2.2') {
//        exports('org.apache.commons.cli')
//    }
    module('scribejava-java8-8.3.1.jar', 'scribejava.java8', '8.3.1') {
        exports("com.github.scribejava.java8.base64")
    }
    module('scribejava-core-8.3.1.jar', 'scribejava.core', '8.3.1') {
//        exports("com.github.scribejava.core")
        exports("com.github.scribejava.core.builder")
        exports("com.github.scribejava.core.builder.api")
        exports("com.github.scribejava.core.oauth")
        exports("com.github.scribejava.core.model")
        exports("com.github.scribejava.core.pkce")
        exports("com.github.scribejava.core.httpclient")
        requires("scribejava.java8")
        requires("com.fasterxml.jackson.core")
        requires("com.fasterxml.jackson.databind")
    }
//
//    module('javafx-graphics-18.0.1-win.jar', 'javafx.graphics', '18.0.1') {
//        exports("com.sun.javafx.tk")
//    }
    module('failureaccess-1.0.1.jar', 'com.google.guava.failureaccess', '1.0.1')
    module('jsr305-3.0.2.jar', 'com.google.code.findbugs.jsr305', '3.0.2')
    module('j2objc-annotations-1.3.jar', 'com.google.j2objc.j2objc-annotations', '1.3')
    module('listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar', 'com.google.guava.listenablefuture', '9999.0-empty-to-avoid-conflict-with-guava')

    module('doc-annotations-0.2.jar', 'eu.lestard', '0.2')
    module('hamcrest-core-1.3.jar', 'org.hamcrest', '1.3')
    automaticModule('opencv-4.5.3-0.jar', 'org.openpnp')
    automaticModule('jna-5.11.0.jar', 'net.java.dev.jna')
    automaticModule('tess4j-5.2.9.jar', 'nl.jixxed.tess4j')
    automaticModule('lept4j-1.16.6.jar', 'nl.jixxed.lept4j')
    automaticModule('jai-imageio-core-1.4.0.jar', 'com.github.jaiimageio')
    automaticModule('jboss-vfs-3.2.16.Final.jar', 'org.jboss')
    automaticModule('commons-logging-1.2.jar', 'org.apache.commons.logging')
    automaticModule('jboss-logging-3.1.4.GA.jar', 'org.jboss.logging')
    automaticModule('logback-classic-1.2.11.jar', 'ch.qos.logback.classic')
    automaticModule('logback-core-1.2.11.jar', 'ch.qos.logback.core')
    automaticModule('javax.servlet-api-4.0.1.jar', 'javax.servlet')

//    automaticModule('java-ocr-api-15.3.0.3.jar', 'com.asprise')

}
compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-exports', "javafx.graphics/com.sun.javafx.tk=nl.jixxed.eliteodysseymaterials",
                '--add-exports', "javafx.graphics/com.sun.glass.ui=nl.jixxed.eliteodysseymaterials"

        ]
        classpath = files()
    }
}
run {
//    setArgs(['edomh://wishlist?eyJldmVudCI6Indpc2hsaXN0IiwidmVyc2lvbiI6IjEiLCJ3aXNobGlzdCI6eyJ1dWlkIjoiMGU4OGE4MzEtMGY1ZS00NjczLWEwODItMzk4YTRmMjA5NDU0IiwibmFtZSI6IkRlZmF1bHQgd2lzaGxpc3QiLCJpdGVtcyI6W3sicmVjaXBlTmFtZSI6IktBUk1BXzRfNSIsInZpc2libGUiOnRydWV9LHsicmVjaXBlTmFtZSI6Ik1BTlRJQ09SRV80XzUiLCJ2aXNpYmxlIjp0cnVlfSx7InJlY2lwZU5hbWUiOiJNQUdBWklORV9TSVpFIiwidmlzaWJsZSI6dHJ1ZX0seyJyZWNpcGVOYW1lIjoiS0FSTUFfMV8yIiwidmlzaWJsZSI6dHJ1ZX1dfX0='])
    jvmArgs = ['--add-exports=javafx.graphics/com.sun.glass.ui=nl.jixxed.eliteodysseymaterials', '--add-exports=javafx.graphics/com.sun.javafx.tk=nl.jixxed.eliteodysseymaterials', '--add-exports=javafx.base/com.sun.javafx.event=org.controlsfx.controls', '--add-exports=jdk.naming.dns/com.sun.jndi.dns=java.naming']
    //, '-Xmx1G', '-XX:+UseCompressedOops', '-XX:+PrintGCDetails', '-XX:SoftRefLRUPolicyMSPerMB=100'
}
test {
    useJUnitPlatform {

    }
}
mainClassName = 'nl.jixxed.eliteodysseymaterials.Main'